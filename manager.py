import getpass
import json
import os
import secrets
import string
import logging
import yaml
from typing import Optional, Tuple, List

from rich.panel import Panel

from db import Database
from crypto import Crypto
from ui import UI
from config import GENERATED_PASSWORD_LENGTH, CONFIG_FILE, DEFAULT_CONFIG, LOG_FILE
from rich.progress import Progress

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class PasswordManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

    def __init__(self):
        self.db = Database()
        self.crypto = Crypto()
        self.ui = UI()
        self.db.init_db()
        # Ensure config file exists
        if not os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "w") as f:
                yaml.dump(DEFAULT_CONFIG, f)

    def generate_password(self, length: int = GENERATED_PASSWORD_LENGTH) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å."""
        chars = string.ascii_letters + string.digits + "!@#$%^&*"
        password = ''.join(secrets.choice(chars) for _ in range(length))
        strength = self.ui.check_password_strength(password)
        self.ui.console.print(f"–°–∏–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {strength}")
        return password

    def change_master_password(self, old_key: bytes, salt: bytes) -> Tuple[bool, Optional[str]]:
        """–ú–µ–Ω—è–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–æ–ª–∏."""
        new_password = self.ui.get_new_master_password()
        if not new_password:
            return False, None

        # Generate new key
        new_key = self.crypto.derive_key(new_password, salt)

        # Re-encrypt all passwords
        with self.db.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT service, username, encrypted_password, category FROM passwords")
            entries = cursor.fetchall()

            for service, username, encrypted_password, category in entries:
                try:
                    # Decrypt with old key
                    password = self.crypto.decrypt_password(encrypted_password, old_key)
                    # Encrypt with new key
                    new_encrypted_password = self.crypto.encrypt_password(password, new_key)
                    # Update database
                    cursor.execute(
                        "UPDATE passwords SET encrypted_password=? WHERE service=? AND (category=? OR category IS NULL)",
                        (new_encrypted_password, service, category)
                    )
                except Exception as e:
                    self.ui.display_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å {service}: {e}")
                    return False, None

            conn.commit()

        # Save new master password hash
        self.crypto.save_master_hash(new_password, salt)
        self.ui.display_success("üîÑ [green]–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω![/green]")
        return True, new_password

    def get_services_and_metadata(self, category: str = None) -> Tuple[List[str], List[str], List[str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤, –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        with self.db.connect() as conn:
            cursor = conn.cursor()
            if category:
                cursor.execute(
                    "SELECT service, username, category FROM passwords WHERE category=?",
                    (category,)
                )
            else:
                cursor.execute("SELECT service, username, category FROM passwords")
            rows = cursor.fetchall()
            services = [row[0] for row in rows]
            usernames = [row[1] for row in rows]
            categories = [row[2] for row in rows]
            return services, usernames, categories

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.ui.print_banner()
        self.ui.animated_loading("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

        salt = self.crypto.get_salt()
        max_attempts = 3
        attempts = 0

        while attempts < max_attempts:
            try:
                master_password = getpass.getpass(self.ui.messages["enter_master_password"])
                if not master_password.strip():
                    raise ValueError("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

                # Verify master password
                if not self.crypto.verify_master_password(master_password, salt):
                    attempts += 1
                    remaining = max_attempts - attempts
                    self.ui.display_error(
                        f"{self.ui.messages['invalid_master_password']} –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}")
                    if remaining == 0:
                        self.ui.display_error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
                        return
                    continue

                key = self.crypto.derive_key(master_password, salt)
                break
            except Exception as e:
                self.ui.display_error(str(e))
                return

        while True:
            action = self.ui.get_action()
            try:
                # Select category for relevant actions
                category = None
                if action in ["get_password", "edit_password", "delete_password"]:
                    categories = self.db.get_all_categories()
                    category = self.ui.select_category(categories)
                    if category == "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
                        category = None

                if action == "add_password":
                    data = self.ui.get_password_data()
                    if not data:
                        continue
                    encrypted_password = self.crypto.encrypt_password(data["password"], key)
                    category = data["category"] if data["category"] else None
                    if self.db.add_password(data["service"], data["username"], encrypted_password, category):
                        self.ui.display_success(self.ui.messages["saved_success"])
                    else:
                        self.ui.display_error(f"–°–µ—Ä–≤–∏—Å '{data['service']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                elif action == "get_password":
                    services, usernames, categories = self.get_services_and_metadata(category)
                    service = self.ui.select_service(services, usernames, categories)
                    if not service:
                        continue
                    while True:
                        sub_action = self.ui.service_menu(service)
                        if sub_action == "back":
                            break
                        elif sub_action == "view":
                            result = self.db.get_password(service, category)
                            if result:
                                try:
                                    password = self.crypto.decrypt_password(result["encrypted_password"], key)
                                    self.ui.display_password(service, result["username"], password, category)
                                except Exception as e:
                                    self.ui.display_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")
                            else:
                                self.ui.display_error(self.ui.messages["not_found"])
                        elif sub_action == "edit":
                            data = self.ui.get_password_data()
                            if not data:
                                continue
                            encrypted_password = self.crypto.encrypt_password(data["password"], key)
                            if self.db.update_password(service, encrypted_password, category):
                                self.ui.display_success(self.ui.messages["saved_success"])
                            else:
                                self.ui.display_error(f"–°–µ—Ä–≤–∏—Å '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        elif sub_action == "delete":
                            if self.ui.confirm_action(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {service}?"):
                                if self.db.delete_password(service, category):
                                    self.ui.display_success(f"üóëÔ∏è [green]{service} —É–¥–∞–ª–µ–Ω![/green]")
                                    break
                                else:
                                    self.ui.display_error(f"–°–µ—Ä–≤–∏—Å '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

                elif action == "generate_password":
                    data = self.ui.get_password_data(generate=True)
                    if not data:
                        continue
                    password = self.generate_password()
                    encrypted_password = self.crypto.encrypt_password(password, key)
                    category = data["category"] if data["category"] else None
                    if self.db.add_password(data["service"], data["username"], encrypted_password, category):
                        self.ui.display_password(data["service"], data["username"], password, category)
                    else:
                        self.ui.display_error(f"–°–µ—Ä–≤–∏—Å '{data['service']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                elif action == "edit_password":
                    services, usernames, categories = self.get_services_and_metadata(category)
                    service = self.ui.select_service(services, usernames, categories)
                    if not service:
                        continue
                    data = self.ui.get_password_data()
                    if not data:
                        continue
                    encrypted_password = self.crypto.encrypt_password(data["password"], key)
                    if self.db.update_password(service, encrypted_password, category):
                        self.ui.display_success(self.ui.messages["saved_success"])
                    else:
                        self.ui.display_error(f"–°–µ—Ä–≤–∏—Å '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

                elif action == "delete_password":
                    services, usernames, categories = self.get_services_and_metadata(category)
                    service = self.ui.select_service(services, usernames, categories)
                    if not service:
                        continue
                    if self.ui.confirm_action(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {service}?"):
                        if self.db.delete_password(service, category):
                            self.ui.display_success(f"üóëÔ∏è [green]{service} —É–¥–∞–ª–µ–Ω![/green]")
                        else:
                            self.ui.display_error(f"–°–µ—Ä–≤–∏—Å '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

                elif action == "backup_data":
                    backup_file = self.db.backup_db()
                    self.ui.display_success(self.ui.messages["backup_success"].format(file=backup_file))

                elif action == "export_data":
                    export_file = self.db.export_data()
                    self.ui.display_success(self.ui.messages["export_success"].format(file=export_file))

                elif action == "import_data":
                    with open("export.json", "r") as f:
                        data = json.load(f)
                    with Progress() as progress:
                        task = progress.add_task("[cyan]–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...", total=len(data))
                        with self.db.connect() as conn:
                            cursor = conn.cursor()
                            for entry in data:
                                cursor.execute(
                                    "INSERT OR IGNORE INTO passwords (service, username, encrypted_password, category) VALUES (?, ?, ?, ?)",
                                    (entry["service"], entry["username"], entry["encrypted_password"],
                                     entry.get("category"))
                                )
                                progress.update(task, advance=1)
                            conn.commit()
                    self.ui.display_success(self.ui.messages["import_success"].format(file="export.json"))

                elif action == "info":
                    self.ui.console.print(Panel.fit(
                        "[bold cyan]–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π v3.0[/bold cyan]\n\n"
                        "üîí [bold green]–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:[/bold green]\n"
                        "- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-256-GCM\n"
                        "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π\n"
                        "- –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
                        "- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç\n"
                        "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
                        "‚ö†Ô∏è [bold red]–û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:[/bold red]\n"
                        "- –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                        "- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                        title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        border_style="cyan"
                    ))

                elif action == "delete_all":
                    if self.ui.confirm_action(self.ui.messages["confirm_delete_all"]):
                        if self.db.delete_db():
                            self.ui.display_success("üî• [red]–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã![/red]")
                        else:
                            self.ui.display_error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

                elif action == "new_db":
                    if self.ui.confirm_action(self.ui.messages["confirm_new_db"]):
                        self.db.delete_db()
                        self.db.init_db()
                        self.ui.display_success("üÜï [green]–ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞![/green]")

                elif action == "change_master_password":
                    success, new_password = self.change_master_password(key, salt)
                    if success and new_password:
                        key = self.crypto.derive_key(new_password, salt)
                        logger.info("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                        new_password = " " * len(new_password)  # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏

                elif action == "exit":
                    self.ui.display_success(self.ui.messages["goodbye"])
                    break

            except Exception as e:
                self.ui.display_error(str(e))
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ {action}: {e}")

        self.db.close()


if __name__ == "__main__":
    manager = PasswordManager()
    manager.run()